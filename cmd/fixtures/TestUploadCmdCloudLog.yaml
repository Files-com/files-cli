---
version: 1
interactions:
- request:
    body: '{"mkdir_parents":"true"}'
    form: {}
    headers:
      Content-Type:
      - application/json
    url: https://app.files.com/api/rest/v1/file_actions/begin_upload/upload_test.go
    method: POST
  response:
    body: '[{"send":{"partsize":"required-header Content-Length","partdata":"body"},"action":"put/write","ask_about_overwrites":false,"available_parts":10000,"expires":"2021-09-20T23:10:58Z","headers":{},"http_method":"PUT","next_partsize":6291456,"parallel_parts":true,"parameters":{},"part_number":1,"partsize":5242880,"ref":"put-52610685","upload_uri":"https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/aae9cc9d-e18e-46a6-9417-3be6d5f40b6e?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210920%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210920T225558Z\u0026X-Amz-Expires=900\u0026X-Amz-SignedHeaders=host\u0026partNumber=1\u0026response-content-type=application%2Foctet-stream\u0026uploadId=SJbeifyTO_yVlpRm4dZuP.MyMdEQJBy6oU9mcCHdVMlKu7lwIvr5M0ziFb.HqjfvGB70jISF9apK6lfr8FK5off1CsaBa5jomVxuWFYfGIYE2VEbLGPZQmnB_Abto7S_\u0026X-Amz-Signature=543666d732a6f43321958e5370e325774156e69d8c9a7857c18927cda9c2ea4e"}]'
    headers:
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Type:
      - application/json
      Date:
      - Mon, 20 Sep 2021 22:55:58 GMT
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - nginx
      X-Request-Id:
      - 4b396ff3-91df-4522-ba64-a48cf99c8aa9
    status: 200 OK
    code: 200
    duration: ""
- request:
    body: "package cmd\n\nimport (\n\t\"log\"\n\t\"strings\"\n\t\"testing\"\n\n\tclib
      \"github.com/Files-com/files-cli/lib\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc
      TestUploadCmd(t *testing.T) {\n\tassert := assert.New(t)\n\tr, config, err :=
      CreateConfig(\"TestUploadCmd\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer
      r.Stop()\n\n\tupload := UploadCmd()\n\tstr := clib.CaptureOutput(func() {\n\t\tout,
      err := callCmd(upload, config, []string{\"upload_test.go\", \"-d\"})\n\t\tassert.NoError(err)\n\t\tassert.Equal(\"\",
      out)\n\t})\n\tassert.ElementsMatch([]string{\n\t\t\"upload_test.go complete
      size 0 B\",\n\t\t\"\",\n\t}, strings.Split(str, \"\\n\"))\n}\n\nfunc TestUploadCmdCloudLog(t
      *testing.T) {\n\tassert := assert.New(t)\n\tr, config, err := CreateConfig(\"TestUploadCmdCloudLog\")\n\tif
      err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\n\tupload := UploadCmd()\n\tstr
      := clib.CaptureOutput(func() {\n\t\tout, err := callCmd(upload, config, []string{\"upload_test.go\",
      \"-d\", \"-l\"})\n\t\tassert.NoError(err)\n\t\tassert.Equal(\"\", out)\n\t})\n\tassert.ElementsMatch([]string{\n\t\t\"upload_test.go
      complete size 0 B\",\n\t\t\"External Event Created: 2021-09-20 18:25:58 -0400
      -0400\",\n\t\t\"\",\n\t}, strings.Split(str, \"\\n\"))\n}\n\nfunc TestUploadCmdSync(t
      *testing.T) {\n\tassert := assert.New(t)\n\tr, config, err := CreateConfig(\"TestUploadCmdSync\")\n\tif
      err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\n\tupload := UploadCmd()\n\tclib.CaptureOutput(func()
      {\n\t\tout, err := callCmd(upload, config, []string{\"upload.go\", \"-d\"})\n\t\tassert.NoError(err)\n\t\tassert.Equal(\"\",
      out)\n\t})\n\tstr := clib.CaptureOutput(func() {\n\t\tout, err := callCmd(upload,
      config, []string{\"upload.go\", \"-d\", \"-s\"})\n\t\tassert.NoError(err)\n\t\tassert.Equal(\"\",
      out)\n\t})\n\tassert.ElementsMatch([]string{\n\t\t\"upload.go skipped size 0
      B\",\n\t\t\"\",\n\t}, strings.Split(str, \"\\n\"))\n}\n\nfunc TestUploadCmdBadPath(t
      *testing.T) {\n\tassert := assert.New(t)\n\tr, config, err := CreateConfig(\"TestUploadCmdBadPath\")\n\tif
      err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Stop()\n\n\tupload := UploadCmd()\n\tstr
      := clib.CaptureOutput(func() {\n\t\tout, err := callCmd(upload, config, []string{\"bad-path\",
      \"-d\"})\n\t\tassert.NoError(err)\n\t\tassert.Equal(\"\", out)\n\t})\n\tif err
      != nil {\n\t\tlog.Println(err)\n\t}\n\tassert.ElementsMatch([]string{\n\t\t\"bad-path
      errored size 0 B\",\n\t\t\"\",\n\t}, strings.Split(str, \"\\n\"))\n}\n"
    form: {}
    headers:
      Content-Length:
      - "2211"
    url: https://s3.amazonaws.com/objects.brickftp.com/metadata/37868/aae9cc9d-e18e-46a6-9417-3be6d5f40b6e?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIEWLY3MN4YGZQOWA%2F20210920%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210920T225558Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&partNumber=1&response-content-type=application%2Foctet-stream&uploadId=SJbeifyTO_yVlpRm4dZuP.MyMdEQJBy6oU9mcCHdVMlKu7lwIvr5M0ziFb.HqjfvGB70jISF9apK6lfr8FK5off1CsaBa5jomVxuWFYfGIYE2VEbLGPZQmnB_Abto7S_&X-Amz-Signature=543666d732a6f43321958e5370e325774156e69d8c9a7857c18927cda9c2ea4e
    method: PUT
  response:
    body: ""
    headers:
      Content-Length:
      - "0"
      Date:
      - Mon, 20 Sep 2021 22:55:59 GMT
      Etag:
      - '"21c1d8a89e939f12bea9a97a31537cbb"'
      Server:
      - AmazonS3
      X-Amz-Id-2:
      - bBm1Hu6QyeqSoG4qinmiewmTjPO1FYNS1DYIc0/Kkmw+Y14sV64BNTsSCf2Wzc+sR6ffdhrIFkA=
      X-Amz-Request-Id:
      - CJDV4B79F5Q68Y3E
      X-Amz-Server-Side-Encryption:
      - AES256
    status: 200 OK
    code: 200
    duration: ""
- request:
    body: '{"action":"end","etags[0][etag]":"\"21c1d8a89e939f12bea9a97a31537cbb\"","etags[0][part]":"1","provided_mtime":"2021-09-20T15:55:58-07:00","ref":"put-52610685","size":"2211"}'
    form: {}
    headers:
      Content-Type:
      - application/json
    url: https://app.files.com/api/rest/v1/files/upload_test.go
    method: POST
  response:
    body: '{"path":"upload_test.go","display_name":"upload_test.go","type":"file","size":2211,"mtime":"2021-09-20T22:55:58Z","provided_mtime":"2021-09-20T22:55:58Z","crc32":null,"md5":null,"mime_type":"application/octet-stream","region":"us-east-1","permissions":"rwd"}'
    headers:
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Type:
      - application/json
      Date:
      - Mon, 20 Sep 2021 22:55:58 GMT
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - nginx
      X-Request-Id:
      - bdcb820d-5604-45db-b2b9-7eeaa6dcad83
    status: 200 OK
    code: 200
    duration: ""
- request:
    body: '{"body":"Starting at 2021-09-20 15:55:58.228836 -0700 PDT m=+3.393488968\nupload
      sync: false\nupload_test.go complete size 2.2 kB","status":"success"}'
    form: {}
    headers:
      Content-Type:
      - application/json
    url: https://app.files.com/api/rest/v1/external_events
    method: POST
  response:
    body: '{"id":28105600,"event_type":"client_log","status":"success","body":"Starting
      at 2021-09-20 15:55:58.228836 -0700 PDT m=+3.393488968\nupload sync: false\nupload_test.go
      complete size 2.2 kB","created_at":"2021-09-20T18:55:58-04:00","body_url":null,"folder_behavior_id":null,"successful_files":0,"errored_files":0,"bytes_synced":0,"remote_server_type":""}'
    headers:
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Length:
      - "353"
      Content-Type:
      - application/json
      Date:
      - Mon, 20 Sep 2021 22:55:58 GMT
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - nginx
      X-Request-Id:
      - 23a17e5e-e692-4462-a66c-808c01f06b4c
    status: 201 Created
    code: 201
    duration: ""
